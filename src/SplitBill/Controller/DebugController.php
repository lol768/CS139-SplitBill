<?php

namespace SplitBill\Controller;

use SplitBill\Authentication\IAuthenticationManager;
use SplitBill\DependencyInjection\IContainer;
use SplitBill\Helper\IControllerHelper;
use SplitBill\IApplication;
use SplitBill\Request\HttpRequest;
use SplitBill\Response\RedirectResponse;
use SplitBill\Session\IFlashSession;

class DebugController extends AbstractController {

    /**
     * @var IControllerHelper The controller helper instance.
     */
    private $h;

    /**
     * @var IContainer
     */
    private $container;
    /**
     * @var IAuthenticationManager
     */
    private $authMan;

    public function __construct(IControllerHelper $helper, IContainer $container, IAuthenticationManager $authMan) {
        $this->h = $helper;
        $this->container = $container;
        $this->authMan = $authMan;
    }

    public function getQueryParametersForAction($action, $method) {
        if ($action == "masquerade") {
            return array("uid" => array("required" => true));
        }
        return parent::getQueryParametersForAction($action, $method); // TODO: Change the autogenerated stub
    }


    /**
     * GET /ioc_debug.php
     */
    public function getContainerInfo() {
        return $this->h->getViewResponse("containerDebug", array(
            "bindings" => $this->container->getInterfaceBindings(),
            "singletons" => $this->container->getSingletonNames(),
        ));
    }

    public function getMasquerade(HttpRequest $req, IApplication $app, $uid) {
        $this->h->requireLoggedIn();
        if (in_array($req->getIpAddress(), $app->getConfig()['masquerade_ips'])) {
            if ($uid == $this->authMan->getRealUser()->getUserId()) {
                $this->authMan->unmasquerade();
            } else {
                $this->authMan->masquerade($uid);
            }
        }
        return new RedirectResponse("index.php");
    }

}
