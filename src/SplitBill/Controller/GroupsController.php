<?php

namespace SplitBill\Controller;

use SplitBill\Authentication\IAuthenticationManager;
use SplitBill\Email\IEmailService;
use SplitBill\Entity\Group;
use SplitBill\Entity\User;
use SplitBill\Enum\GroupRelationType;
use SplitBill\Exception\NotImplementedException;
use SplitBill\Helper\IControllerHelper;
use SplitBill\Repository\IGroupRepository;
use SplitBill\Request\HttpRequest;
use SplitBill\Response\AbstractResponse;
use SplitBill\Response\RedirectResponse;
use SplitBill\Session\IFlashSession;
use SplitBill\Validation\GroupAddFormRequest;
use SplitBill\Validation\GroupUserInviteRequest;

class GroupsController extends AbstractController {

    /**
     * @var IControllerHelper The controller helper instance.
     */
    private $h;
    /**
     * @var IGroupRepository
     */
    private $groupRepo;
    /** @var User */
    private $user;
    /**
     * @var HttpRequest
     */
    private $req;

    public function __construct(IControllerHelper $helper, IGroupRepository $groupRepo, IAuthenticationManager $authMan, HttpRequest $req) {
        $this->h = $helper;
        $this->h->requireLoggedIn();
        $this->h->setActiveNavigationItem("Groups");
        $this->groupRepo = $groupRepo;
        $this->user = $authMan->getEffectiveUser();
        $this->req = $req;
    }

    public function getQueryParametersForAction($action, $method) {
        if ($action == "confirminvite") {
            return array("gid" => array("required" => true), "role" => array("required" => true));
        }
        return parent::getQueryParametersForAction($action, $method); // TODO: Change the autogenerated stub
    }

    /**
     * GET /groups.php
     */
    public function getGroupsList() {
        $myGroups = $this->groupRepo->getGroupsSatisfyingRelation($this->user->getUserId(), null);

        $viewVars = array(
            "title" => "Groups",
            "myGroups" => array()
        );
        foreach ($myGroups as $myGroup) {
            $relations = $this->groupRepo->getRelationsForGroup($myGroup);
            $data = array("group" => $myGroup, "relations" => $relations);
            foreach ($relations as $relation) {
                if ($relation->getUser()->getUserId() == $this->user->getUserId()) {
                    $data['myRelation'] = $relation;
                }
            }
            $viewVars['myGroups'][] = $data;
        }
        return $this->h->getViewResponse("groupsList", $viewVars);
    }

    /**
     * POST /add_group.php
     * @param GroupAddFormRequest $groupAdd
     * @return AbstractResponse
     */
    public function postAddGroup(GroupAddFormRequest $groupAdd) {
        if (!$groupAdd->isValid()) {
            return new RedirectResponse("groups.php");
        } else {
            $group = new Group($groupAdd->getName(), $groupAdd->isSecret(), $groupAdd->isOpen());
            $this->groupRepo->add($group);
            $this->groupRepo->addRelation($group->getGroupId(), $this->user->getUserId(), GroupRelationType::OWNER);
            return new RedirectResponse("groups.php");
        }
    }

    public function postInviteGroup(GroupUserInviteRequest $groupInvite, IFlashSession $flash, IEmailService $email) {
        if (!$groupInvite->isValid()) {
            return new RedirectResponse("groups.php");
        }
        $groupId = $groupInvite->getGroup()->getGroupId();
        $user = $groupInvite->getUserToInvite();
        $this->groupRepo->addInvitation($groupId, $user->getUserId(), $groupInvite->getRole());
        $email->sendEmail($user->getEmail(), "Group invitation", "inviteConfirm", array(
            "name" => $user->getName(),
            "confirmationUrl" => $this->getInviteConfirmationUrl($groupId, $groupInvite->getRole()),
            "role" => $groupInvite->getRole(),
            "group" => $groupInvite->getGroup()->getName()
        ));
        $flash->set("flash", array("message" => "Invitation sent!", "type" => "success"));

        return new RedirectResponse("groups.php");
    }

    private function getInviteConfirmationUrl($groupId, $role) {
        $currentUrl = "http://" . $this->req->getHeader("Host") . $this->req->getUrlRequested();
        $url = preg_replace("/[A-Za-z_]+\\.php.*$/", "invite_confirm.php", $currentUrl);
        return $url . "?gid=$groupId&role=$role";
    }

    public function getConfirmInvite($gid, $role, IFlashSession $flash) {
        if ($this->groupRepo->hasInvitation($gid, $this->user->getUserId(), $role)) {
            $this->groupRepo->addRelation($gid, $this->user->getUserId(), $role);
            $flash->set("flash", array("message" => "Invitation accepted!", "type" => "success"));
            return new RedirectResponse("groups.php");
        } else {
            return $this->h->getPrettyErrorResponse("No invite found.");
        }
    }

}
